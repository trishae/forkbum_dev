{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/004","result":{"data":{"markdownRemark":{"frontmatter":{"author":"isabel","date":"2021-11-18","title":"a simple example of python code injection","path":"/blog/004"},"html":"<p>Perhaps in implementation/the real world, code injection can get complex. I, myself, have never really ran into such vulnerabilities outside of lab/simulated situations, but I'd like to give a shot at simplifying the general concept here.</p>\n<h5>> say, wtf is it anyway?</h5>\n<p>Code injection basically occurs when code inserted into a user input feature exploits an input validation flaw within its software. The inserted code is then executed and performs some malicious action against the vulnerability. There are various types of injection attacks, but this post will specifically speak to this type of injection attack using Python.</p>\n<h5>> about python2</h5>\n<p>For this example, I will be explaining code injection using Python version 2. Python2 is known to have a plethora of security vulnerabilities, and support for Python2 has been discontinued.</p>\n<p>Some of the functions in Python2 that pose security risks are: eval(), input(), and exec().</p>\n<h5>> simple example 1</h5>\n<p>Let's do a simple walk-through. First, in your browser, enter this <a href=\"https://onecompiler.com/\">site</a>. On the left side, you should see the editor where you can type your code, and on the right side, you should see a standard input (\"STDIN\") panel and an output panel. </p>\n<p>Above those  right-side panels, you should see a drop-down button to change the language; change the language to Python2 (the default seems to be Java). In the editor, enter the following code:</p>\n<pre><code>print \"Let's do some math...\"\nans = 7006652\n\nif ans == input(\"What is 1234 * 5678?\"):\n  print \"\\nOk Einstein.\"\nelse:\n  print \"\\nTry again!\"\n</code></pre>\n<p>Enter any number in the \"STDIN\" box, then run the code. You can either enter the right or wrong answer to observe which message it will print.</p>\n<p>Now enter the variable name, \"ans,\" in the \"STDIN\" box, and observe that you didn't actually need to evaluate the math to achieve getting the answer \"right.\" This is a very simple example of code injection. Essentially, what is happening here is Python is evaluating if the value of \"ans\" with the value of \"ans.\" Since 7006652 is obviously equal to 7006652, the condition met is TRUE, which prints, \"Ok Einstein,\" to the output.</p>\n<h5>> simple example 2</h5>\n<p>Let's look at how the eval() function behaves. Clear the editor, and enter the following:</p>\n<pre><code>print \"Let's do some math...\"\nans = 7006652\n\nuser_in = raw_input(\"What is 1234 * 5678?\")\n\nif ans == eval(user_in):\n  print \"\\nOk Einstein.\"\nelse:\n  print \"\\nYou entered\" + eval(user_in) + \"... Try again!\"\n</code></pre>\n<p>Now this code is pretty much the same as the previous. In fact, the input() function pretty much uses raw_input() and eval() together anyway.</p>\n<p>Again, enter any number, correct or incorrect, and observe which message you'll receive. You can also still enter the variable name, \"ans,\" to evaluate the condition as true.</p>\n<p>Now to observe how eval() can be exploited, enter <em><strong>import</strong>('sys').version</em>, and notice how python will call the <strong>import</strong> built-in function to return the version of the Python interpreter (this number should match a 2.7.x version). As you can see, it can be exploited to have access to variables and functions used by the interpretor. </p>\n<h5>> conclusion</h5>\n<p>Use Python3! Jk - I need to write more, but this shall be subject to further elaboration and revisions for now.... In the meantime, <a href=\"https://docs.python.org/2/library/index.html\">here is the Python2 documentation if you'd like to review its operating system and runtime services</a>.</p>"}},"pageContext":{}},"staticQueryHashes":[]}