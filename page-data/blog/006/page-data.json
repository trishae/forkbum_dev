{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/006","result":{"data":{"markdownRemark":{"frontmatter":{"author":"isabel","date":"2022-03-26","title":"approaching a coding problem using excel","path":"/blog/006"},"html":"<p>Every year in December, <a href=\"https://adventofcode.com/\">Advent of Code</a> releases an advent calendar of small programming puzzles to participating users that can hypoethtically be solved using any programming language. Although I didn't finish the entirety of the calendar, I made a meaningful attempt at a few of the problems using Python. These attempts can be reviewed in this <a href=\"https://github.com/forkbum/adventofcode2021\">repo</a>. I was able to transofrm one of the solutions in Python into an Excel approach.</p>\n<h5>> the problem</h5>\n<p>The full explanation of the problem can be reviewed <a href=\"https://adventofcode.com/2021/day/2\">here</a>. In summary, I am supposed to pilot a hypothetical submarine to retrieve sleigh keys that flew into an ocean (read the day 1 release for more context of the problem). I am given a list of commands to pilot the submarine based on horizontal position and depth readings. To get the correct answer for the puzzle, the final horizontal position and depth of the submarine must be multiplied. A sample list of commands are provided as follows: forward 5, down 5, forward 8, up 3, down 8, forward 2. \"Forward\" readings add to the horizontal position, while \"up\" and \"down\" readings decrease and increase, respectively, the depth. Based on this sample list of commands, the product of the final horizontal position and depth readings is 150.</p>\n<h5>> the algorithm</h5>\n<p>Solving this problem using Python is relatively straightforward. Generally, the list of commands, which can be any unspecified length, can be pasted into a text file and read by the built-in <a href=\"https://www.w3schools.com/python/python_file_open.asp\">open()</a> and <a href=\"https://www.w3schools.com/python/ref_file_readlines.asp\">readlines()</a> function. Then the following algorithm can be performed (my exact Python code can be found <a href=\"https://github.com/forkbum/adventofcode2021/blob/main/day2/day2_p1.py\">here</a>):</p>\n<ol>\n<li>Read line</li>\n<li>Parse the line by a single space delimiter</li>\n<li>If the first parsed token is a \"forward\" instrution, add the value in the second parsed token to the horizonal position</li>\n<li>If the first parsed token is a \"down\" instrution, add the value in the second parsed token to the depth</li>\n<li>If the first parsed token is an \"up\" instrution, subtract the value in the second parsed token from the depth</li>\n<li>After all lines of the file has been read, multiply the final values of the horizontal position and the depth to retrieve the answer</li>\n</ol>\n<p>Approaching the problem using Excel will require a different approach due to the fact that Excel is a tool, not a programming language, and using its native functions are constrained by tabular formatting (i.e. the spreadsheet). Here is my general approach: the list of commands, which can still be of any unspecified length, must be pasted into the first (\"A\") column. The second (\"B\") column is reserved for horizontal position values, the third (\"C\") column is reserved for depth values, and the fourth (\"D\") column is reserved for the products of horizontal position and depth values (\"B\" and \"C\" columns). I added labels for each column in the first row, and in the second row, I initialized the B, C, and D columns with 0.</p>\n<p>With this tabular set up, the following can be performed on each row starting on the third row:</p>\n<ol>\n<li>In column B, parse the value in column A (i.e. the specific command) by a single space delimiter, and if the first parsed token is a \"forward\" instruction, add the value in the second parsed token to the horizonal position in the previous row</li>\n<li>In column C, parse the value in column A (i.e. the specific command) by a single space delimiter, and if the first parsed token is a \"down\" instruction, add the value in the second parsed token to the depth in the previous row, but if the first parsed token is an \"up\" instruction, subtrat the value in the second parsed token from the depth in the previous row</li>\n<li>In column D, multiply the values in columns B and C</li>\n</ol>\n<p>Then using native Excel features, apply this same logic throughout rows in a given column (i.e. <a href=\"https://support.microsoft.com/en-us/office/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218\">drag the fill handle</a> to quickly apply logic).</p>\n<h5>> the implementation</h5>\n<p>In order to implement this solution, having knowledge of Excel functions is required. Below are the functions and other Excel components I used to build the logical implementation along with their short descriptions:</p>\n<ul>\n<li>IF(<em>condition</em>, <em>statement if condition is evaluated true</em>, <em>statement if condition is evaluated false</em>)</li>\n<li>LEFT(<em>string/word to parse</em>, <em>index starting from the left of the string/word</em>) - returns the calculated substring/subword</li>\n<li>RIGHT(<em>string/word to parse</em>, <em>index starting from the right of the string/word</em>) - returns the calculated substring/subword</li>\n<li>FIND(<em>substring/subword</em>, <em>string/word</em>) - returns the index location of the substring/subword in the string/word</li>\n<li>LEN(<em>string/word</em>) - returns the number of characters/length of the string/word</li>\n<li>PRODUCT(<em>first value</em>, <em>second value</em>) - returns the product of the two values</li>\n<li>@INDIRECT - gets the referenced location (instead of direct value) of a specified cell range</li>\n</ul>\n<p>Putting all these components together, we can construct the formulas required to make calculations on the horizontal position and depth readings. For the first calculations on the third row, prior to dragging the fill handle on the rest of the rows, cell B3, C3, and D3 can be filled with the following formulas, respectively:</p>\n<pre><code>=IF(LEFT($A3, FIND( \" \",$A3) - 1 )= \"forward\",@INDIRECT(\"B\" &#x26; ROW() -1) + RIGHT(\n$A3, FIND(\" \",$A3)-LEN(LEFT ($A3, FIND(\" \",$A3) - 1 ))),$B2)\n\n=IF(LEFT($A3, FIND( \" \"$A3) - 1 ) = \"down\",@INDIRECT(\"C\" &#x26; ROW() -1) + RIGHT(\n$A3, FIND(\" \",$A3)-LEN(LEFT ($A3, FIND( \" \",$A3) - 1 ))),IF(LEFT ($A3, FIND(\" \",$A3)\n-1)= \"up\",@INDIRECT(\"C\" &#x26; ROW() -1) - RIGHT($A3, FIND(\" \",$A3)-LEN(LEFT($A3,\nFIND(\" \", $A3) - 1 ))),$C2))\n\n=PRODUCT($B3,$C3)\n</code></pre>\n<p>After applying this logic through the rest of the rows via the dragging the fill handle, the final value of column D should contain the answer to the puzzle.</p>"}},"pageContext":{}},"staticQueryHashes":[]}